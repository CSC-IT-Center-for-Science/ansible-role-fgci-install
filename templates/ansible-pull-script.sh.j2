#!/bin/bash
# This file is created with ansible-role-fgci-install on the install node
#
# It is a script to run ansible-pull on an FGCI compute node
# It is first grabbed with curl during kickstart
# It's initially set to execute every 15 minutes
# Local.yml itself changes cron interval after execution.

# writes to syslog and stderr with tag ansible-pull
loggercmd="/usr/bin/logger -s -t ansible-pull"
export http_proxy="http://{{ int_gateway }}:3128"
export https_proxy=$http_proxy
export no_proxy="localhost,{{ pull_install_ip }},raw.githubusercontent.com"
time=$[ ( $RANDOM % {{ ansible_pull_sleep }} )  + 1 ]
lockdir="/var/lock/ansible-pull"
WORKDIR="workdir"

# Command line option handling. Only -n (= no sleep, useful for
# interactive use) is supported so far.
while getopts ":n" opt; do
    case $opt in
	n)
            time=0
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    ;;
    esac
done


# Setup the ansible-pull fgci work dir
mkdir -p /root/.ansible/pull/$WORKDIR
cd /root/.ansible/pull/$WORKDIR

## One ansible-pull at a time
if ! mkdir "$lockdir"; then
        $loggercmd "cannot acquire lock, giving up on $lockdir"
        exit 1
fi
##

# Bring Up Ib0 if config file exists and is down
if [ -f /etc/sysconfig/network-scripts/ifcfg-ib0 ] && grep -q "down" /sys/class/net/ib0/operstate
then
	/usr/sbin/ifup ib0
fi

# Sleep a bit
/bin/sleep "$time"s

# Clone or update the fgci-ansible repo
git config --get remote.origin.url |grep {{ pull_install_ip }} >/dev/null
if [ "$?" != 0 ]; then
    cd ..
    rm -rf $WORKDIR
    /usr/bin/git clone http://{{ pull_install_ip }}:8080/github.com/CSC-IT-Center-for-Science/fgci-ansible.git $WORKDIR
if [ "$?" != 0 ]; then
        $loggercmd "error: with 'git clone http://{{ pull_install_ip }}:8080/github.com/CSC-IT-Center-for-Science/fgci-ansible.git $WORKDIR' PWD=$PWD rc=$?"
fi
    cd $WORKDIR
else
# If the .git directory exists then only run git pull
/usr/bin/git pull
if [ "$?" != 0 ]; then
        $loggercmd "error: git pull in PWD=$PWD rc=$?"
fi
fi

# Mirror in the group_vars - they are copied to install node's www with the fgci-install tag and role for install node.
# Wget assumes we are in $HOME/.ansible/pull/$WORKDIR when running
/usr/bin/wget --no-host-directories --mirror --accept=example,yml,fgci-default-packages http://{{ pull_install_ip }}/group_vars

# Mirror the host_vars tree
/usr/bin/wget --no-host-directories --no-parent --mirror http://{{ pull_install_ip }}/host_vars

# Install all the ansible role dependencies
/usr/bin/curl -f -O http://{{ pull_install_ip }}/requirements_mirror.yml
if [ "$?" != 0 ]; then
        $loggercmd "error: curling http://{{ pull_install_ip }}/requirements_mirror.yml rc=$?"
fi
/usr/bin/ansible-galaxy install -r requirements_mirror.yml -f -i
if [ "$?" != 0 ]; then
        $loggercmd "error: installing ansible requirements rc=$?"
fi

# Get the ansible hosts file 
/usr/bin/curl -f -o /root/hosts http://{{ pull_install_ip }}/hosts
if [ "$?" != 0 ]; then
        $loggercmd "error: curling http://{{ pull_install_ip }}/hosts rc=$?"
fi

# run the fgci-ansible/local.yml playbook, master/devel branch and /root/hosts inventory file
/usr/bin/ansible-pull -U http://{{ pull_install_ip }}:8080/github.com/CSC-IT-Center-for-Science/fgci-ansible.git -C {{ ansible_pull_branch }} -i /root/hosts -d /root/.ansible/pull/$WORKDIR --full
pull_exit=$?
$loggercmd "info: ansible-pull -U https://{{ pull_install_ip }}:8080/github.com/CSC-IT-Center-for-Science/fgci-ansible.git -C {{ ansible_pull_branch }} -i /root/hosts -d /root/.ansible/pull/$WORKDIR --full exited with rc=$pull_exit"

{% if ansible_pull_grafana_annotation is defined %}
{% if ansible_pull_grafana_annotation == true %}
# Send a notification to cassini.fgci.csc.fi
if [ "$pull_exit" == 0 ]; then
  /bin/bash /root/.ansible/pull/$WORKDIR/tools/grafana_ansible_pull.sh succeeded
else
  /bin/bash /root/.ansible/pull/$WORKDIR/tools/grafana_ansible_pull.sh failed
fi
{% endif %}
{% endif %}

# Remove lockdir when we are done but before we update ourselves.
rmdir $lockdir

# Grab the latest ansible-pull-script.sh
/usr/bin/curl -f -o /usr/local/bin/ansible-pull-script.sh http://{{ pull_install_ip }}/ansible-pull-script.sh
if [ "$?" != 0 ]; then
        $loggercmd "error: curl -f -o /usr/local/bin/ansible-pull-script.sh http://{{ pull_install_ip }}/ansible-pull-script.sh failed with rc=$?"
fi
chmod 0750 /usr/local/bin/ansible-pull-script.sh
